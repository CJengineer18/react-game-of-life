{"version":3,"sources":["components/Board.tsx","maps/World.ts","maps/worlds/Closed2D.ts","maps/worlds/Toroid.ts","components/ControlPanel.tsx","util/ColorPallete.ts","components/Game.tsx","components/Viewport.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Board","props","state","printCells","bind","size","this","boardSize","wCells","Math","round","cellSize","hCells","cSize","visibleGrid","className","style","width","height","i","j","cells","matrix","boardMatrix","pallete","push","key","id","getCssClassName","getValue","join","onClick","cellListener","React","Component","World","x","y","realX","validateX","realY","validateY","newValue","Closed2D","length","Toroid","abs","ControlPanel","currentGeneration","world","currentPopulation","stepListener","clearListener","textAlign","type","onChange","checkboxListener","checked","grid","mapSelectListener","value","maps","map","idx","colorPalleteSelectListener","currentPallete","palletes","getPalleteName","ColorPallete","palleteName","cssClassName","Game","board","cell","nCellSide","changeCellState","clearBoard","showGrid","changeMapType","changeColorPallete","currentBoard","zeroes","newGeneration","asyncUpdateBoard","newBoard","setState","arr","Promise","resolve","reject","updateBoard","neighborhood","population","newBoardState","currentState","getNeighborhoodState","countPopulation","createNewWorld","idxX","idxY","move","sum","ev","coords","target","split","n","parseInt","alive","setValue","forEach","row","mapType","newWorld","newMap","selectedOptions","currentMapState","getMatrix","option","selectedIndex","Viewport","href","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c727b585.chunk.js","sourcesContent":["/*\n * Board.tsx\n * Types: ../types/Board.ts\n *\n * The panel where the game plays.\n */\n\nimport React from \"react\";\nimport \"../styles/Board.scss\";\nimport { BoardProps, BoardState } from \"../types/Board\";\n\nexport default class Board extends React.Component<BoardProps, BoardState> {\n    constructor(props: BoardProps) {\n        super(props);\n        this.state = {};\n\n        this.printCells = this.printCells.bind(this);\n    }\n\n    render() {\n        const size = this.props.boardSize;\n        const wCells = Math.round(size / this.props.cellSize);\n        const hCells = Math.round(size / this.props.cellSize);\n        const cSize = this.props.visibleGrid\n            ? this.props.cellSize - 2\n            : this.props.cellSize;\n\n        return (\n            <div className=\"board\" style={{ width: size, height: size }}>\n                {this.printCells(wCells, hCells, cSize)}\n            </div>\n        );\n    }\n\n    /**\n     * Creates the cells in the board.\n     *\n     * @param wCells Total cells in x axis.\n     * @param hCells Total cells in y axis.\n     * @param size Size of each cell side in pixels.\n     *\n     * @returns JSX.Element[]\n     */\n    printCells(wCells: number, hCells: number, size: number) {\n        const cells = [];\n        const matrix = this.props.boardMatrix;\n        const pallete = this.props.pallete;\n\n        let i;\n        let j;\n\n        for (i = 0; i < hCells; i++) {\n            for (j = 0; j < wCells; j++) {\n                cells.push(\n                    <div\n                        key={`cell_${i}-${j}`}\n                        id={`${i}-${j}`}\n                        style={{ width: size, height: size }}\n                        className={[\n                            \"board-cell\",\n                            pallete.getCssClassName(),\n                            matrix.getValue(i, j) ? \"alive\" : \"dead\",\n                            this.props.visibleGrid ? \"grid\" : \"\",\n                        ].join(\" \")}\n                        onClick={this.props.cellListener}\n                    />\n                );\n            }\n        }\n\n        return cells;\n    }\n}\n","/**\n * Defines the World Map for the game. The map must be a number matrix.\n */\nexport default abstract class World {\n    protected matrix: number[][];\n\n    constructor(matrix: number[][]) {\n        this.matrix = matrix;\n    }\n\n    protected abstract validateX(x: number): number;\n    protected abstract validateY(y: number): number;\n\n    public getValue(x: number, y: number) {\n        const realX = this.validateX(x);\n        const realY = this.validateY(y);\n\n        return this.matrix[realX][realY];\n    }\n\n    public setValue(x: number, y: number, newValue: number) {\n        const realX = this.validateX(x);\n        const realY = this.validateY(y);\n\n        this.matrix[realX][realY] = newValue;\n    }\n\n    public getMatrix() {\n        return this.matrix;\n    }\n}\n","// 2D world with limits\n\nimport World from \"../World\";\n\nexport default class Closed2D extends World {\n    protected validateX(x: number): number {\n        if (x >= this.matrix.length) {\n            x = this.matrix.length - 1;\n        } else if (x < 0) {\n            x = 0;\n        }\n\n        return x;\n    }\n\n    protected validateY(y: number): number {\n        if (y >= this.matrix[0].length) {\n            y = this.matrix[0].length - 1;\n        } else if (y < 0) {\n            y = 0;\n        }\n\n        return y;\n    }\n}\n","// Toroid world\n\nimport World from \"../World\";\n\nexport default class Toroid extends World {\n    protected validateX(x: number) {\n        if (x < 0) {\n            x = this.matrix.length - Math.abs(x);\n        } else if (x >= this.matrix.length) {\n            x = Math.abs(x - this.matrix.length);\n        }\n\n        return x;\n    }\n\n    protected validateY(y: number) {\n        if (y < 0) {\n            y = this.matrix[0].length - Math.abs(y);\n        } else if (y >= this.matrix[0].length) {\n            y = Math.abs(y - this.matrix[0].length);\n        }\n\n        return y;\n    }\n}\n","/*\n * ControlPanel.tsx\n * Types: ../types/ControlPanel.ts\n *\n * Show the available options for the game.\n */\n\nimport React from \"react\";\nimport { ControlPanelProps, ControlBoardState } from \"../types/ControlPanel\";\nimport \"../styles/ControlPanel.scss\";\n\nexport default class ControlPanel extends React.Component<ControlPanelProps, ControlBoardState> {\n    constructor(props: ControlPanelProps) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div className=\"control\">\n                <div>\n                    <p>Generation: {this.props.currentGeneration}</p>\n                    <p>Population: {this.props.world.currentPopulation}</p>\n                    <button onClick={this.props.stepListener}>Step</button>\n                    <button onClick={this.props.clearListener}>Clear</button>\n                    <p style={{ textAlign: \"left\" }}>\n                        <input\n                            type=\"checkbox\"\n                            onChange={this.props.checkboxListener}\n                            checked={this.props.grid}\n                        />{\" \"}\n                        Grid\n                    </p>\n                </div>\n                <div>\n                    <p>Map Type: </p>\n                    <select\n                        onChange={this.props.mapSelectListener}\n                        value={this.props.world.type}>\n                        {this.props.maps.map((map, idx) => {\n                            return (\n                                <option key={`map-opt-${idx}`} value={map}>\n                                    {map}\n                                </option>\n                            );\n                        })}\n                    </select>\n                    &nbsp;\n                    <p>Color Pallete: </p>\n                    <select\n                        onChange={this.props.colorPalleteSelectListener}\n                        value={this.props.currentPallete.getCssClassName()}>\n                        {this.props.palletes.map((pallete, idx) => {\n                            return (\n                                <option\n                                    key={`pallete-opt-${idx}`}\n                                    value={pallete.getCssClassName()}>\n                                    {pallete.getPalleteName()}\n                                </option>\n                            );\n                        })}\n                    </select>\n                </div>\n            </div>\n        );\n    }\n}\n","export default class ColorPallete {\n    private palleteName: string;\n    private cssClassName: string;\n\n    constructor(palleteName: string, cssClassName: string) {\n        this.palleteName = palleteName;\n        this.cssClassName = cssClassName;\n    }\n\n    getPalleteName() {\n        return this.palleteName;\n    }\n\n    getCssClassName() {\n        return this.cssClassName;\n    }\n}\n","/*\n * Game.tsx\n * Types: ../types/Game.ts\n *\n * The game itself. Contains the rules and the events required for the execution.\n */\n\nimport React from \"react\";\nimport { GameProps, GameState, WorldState } from \"../types/Game\";\nimport Board from \"./Board\";\nimport World from \"../maps/World\";\nimport Closed2D from \"../maps/worlds/Closed2D\";\nimport Toroid from \"../maps/worlds/Toroid\";\nimport ControlPanel from \"./ControlPanel\";\nimport ColorPallete from \"../util/ColorPallete\";\n\nexport default class Game extends React.Component<GameProps, GameState> {\n    private board = 1000;\n    private cell = 20;\n    private nCellSide = 0;\n    private maps = [\"Toroid\", \"Closed2D\"];\n    private palletes = [\n        new ColorPallete(\"Classic\", \"classic\"),\n        new ColorPallete(\"High Contrast\", \"high-contrast\"),\n        new ColorPallete(\"Negative High Contrast\", \"negative-high-contrast\"),\n    ];\n\n    constructor(props: GameProps) {\n        super(props);\n\n        this.changeCellState = this.changeCellState.bind(this);\n        this.clearBoard = this.clearBoard.bind(this);\n        this.showGrid = this.showGrid.bind(this);\n        this.changeMapType = this.changeMapType.bind(this);\n        this.changeColorPallete = this.changeColorPallete.bind(this);\n\n        this.nCellSide = Math.round(this.board / this.cell);\n        this.state = {\n            currentGeneration: 1,\n            grid: true,\n            world: {\n                currentBoard: new Toroid(this.zeroes()),\n                currentPopulation: 0,\n                type: this.maps[0],\n            },\n            currentPallete: this.palletes[0],\n        };\n    }\n\n    // React functions\n\n    render() {\n        return (\n            <div className=\"game\">\n                <ControlPanel\n                    maps={this.maps}\n                    world={this.state.world}\n                    grid={this.state.grid}\n                    currentGeneration={this.state.currentGeneration}\n                    stepListener={() => this.newGeneration()}\n                    clearListener={() => this.clearBoard()}\n                    mapSelectListener={this.changeMapType}\n                    colorPalleteSelectListener={this.changeColorPallete}\n                    checkboxListener={() => this.showGrid()}\n                    palletes={this.palletes}\n                    currentPallete={this.state.currentPallete}\n                />\n                <Board\n                    boardSize={this.board}\n                    cellSize={this.cell}\n                    boardMatrix={this.state.world.currentBoard}\n                    cellListener={this.changeCellState}\n                    visibleGrid={this.state.grid}\n                    pallete={this.state.currentPallete}\n                />\n            </div>\n        );\n    }\n\n    // Class functions\n\n    /**\n     * Loads the new generation according to the rules.\n     */\n    async newGeneration() {\n        const newBoard = await this.asyncUpdateBoard();\n\n        this.setState({\n            currentGeneration: this.state.currentGeneration + 1,\n            world: newBoard,\n        });\n    }\n\n    /**\n     * Creates a matrix of zeroes.\n     *\n     * @return A matrix of zeroes.\n     */\n    zeroes() {\n        const arr: number[][] = [];\n        const size = this.nCellSide;\n\n        let i; // x\n        let j; // y\n\n        for (i = 0; i < size; i++) {\n            arr[i] = [];\n\n            for (j = 0; j < size; j++) {\n                arr[i][j] = 0;\n            }\n        }\n\n        return arr;\n    }\n\n    /**\n     * Updates the board asyncronously.\n     *\n     * @returns Promise<WorldState>\n     */\n    asyncUpdateBoard() {\n        return new Promise<WorldState>((resolve, reject) => {\n            resolve(this.updateBoard());\n        });\n    }\n\n    /**\n     * Executes the rules and update the board with the next generarion.\n     *\n     * @returns WorldState\n     */\n    updateBoard() {\n        const size = this.nCellSide;\n        const newBoardState: number[][] = this.zeroes();\n        const currentState = this.state.world.currentBoard;\n\n        let i; // x\n        let j; // y\n        let neighborhood;\n        let population;\n\n        for (i = 0; i < size; i++) {\n            for (j = 0; j < size; j++) {\n                neighborhood = this.getNeighborhoodState(i, j);\n\n                if (!currentState.getValue(i, j) && neighborhood === 3) {\n                    newBoardState[i][j] = 1;\n                } else if (\n                    currentState.getValue(i, j) &&\n                    (neighborhood < 2 || neighborhood > 3)\n                ) {\n                    newBoardState[i][j] = 0;\n                } else {\n                    newBoardState[i][j] = currentState.getValue(i, j);\n                }\n            }\n        }\n\n        population = this.countPopulation(newBoardState);\n\n        return {\n            currentBoard: this.createNewWorld(newBoardState),\n            currentPopulation: population,\n            type: this.state.world.type,\n        };\n    }\n\n    /**\n     * Get the number of neighbors in a coordinate.\n     *\n     * @param x\n     * @param y\n     *\n     * @returns number\n     */\n    getNeighborhoodState(x: number, y: number) {\n        const size = this.nCellSide;\n        const move = [-1, 0, 1];\n\n        let i;\n        let j;\n        let idxX;\n        let idxY;\n        let sum = 0;\n\n        // Toroid\n        for (i = 0; i < move.length; i++) {\n            for (j = 0; j < move.length; j++) {\n                idxX = (x + move[i]) % size;\n                idxY = (y + move[j]) % size;\n\n                if (move[i] !== 0 || move[j] !== 0) {\n                    sum += this.state.world.currentBoard.getValue(idxX, idxY);\n                }\n            }\n        }\n\n        return sum;\n    }\n\n    /**\n     * Mouse event. Change the state of a cell.\n     *\n     * @param ev The mouse event\n     */\n    changeCellState(ev: React.MouseEvent) {\n        const id = (ev.target as HTMLElement).id;\n        const coords = id.split(\"-\").map((n) => {\n            return parseInt(n);\n        });\n        const board = this.state.world.currentBoard;\n        const alive = !!board.getValue(coords[0], coords[1]);\n\n        board.setValue(coords[0], coords[1], alive ? 0 : 1);\n\n        this.setState({\n            world: {\n                currentBoard: board,\n                currentPopulation: alive\n                    ? this.state.world.currentPopulation - 1\n                    : this.state.world.currentPopulation + 1,\n                type: this.state.world.type,\n            },\n        });\n    }\n\n    /**\n     * Counts the total of alive cells in a board.\n     *\n     * @param board\n     */\n    countPopulation(board: number[][]) {\n        let population = 0;\n\n        board.forEach((row) => {\n            row.forEach((n) => {\n                if (n) {\n                    population++;\n                }\n            });\n        });\n\n        return population;\n    }\n\n    /**\n     * Cleans the board and restart the game.\n     */\n    clearBoard() {\n        this.setState({\n            currentGeneration: 1,\n            world: {\n                currentBoard: this.createNewWorld(this.zeroes()),\n                currentPopulation: 0,\n                type: this.state.world.type,\n            },\n        });\n    }\n\n    /**\n     * Shows or hide the grid in the board.\n     */\n    showGrid() {\n        this.setState({\n            grid: !this.state.grid,\n        });\n    }\n\n    /**\n     * Update the board with a new world. Each world has it's own rules.\n     *\n     * @param matrix The board\n     * @param mapType (Optional) The new board type. Default to current selected in list.\n     *\n     * @returns World\n     * @see changeMapType\n     */\n    createNewWorld(matrix: number[][], mapType?: string) {\n        const map = mapType || this.state.world.type;\n\n        let newWorld: World;\n\n        switch (map) {\n            case \"Closed2D\":\n                newWorld = new Closed2D(matrix);\n                break;\n            case \"Toroid\":\n                newWorld = new Toroid(matrix);\n                break;\n            default:\n                newWorld = this.state.world.currentBoard;\n                break;\n        }\n\n        return newWorld;\n    }\n\n    /**\n     * Select listener. Re-creates the game's world with a new map.\n     *\n     * @param ev The select's ChangeEvent.\n     */\n    changeMapType(ev: React.ChangeEvent) {\n        const option = (ev.target as HTMLSelectElement).selectedOptions[0];\n        const newMap = option.value;\n        const currentMapState = this.state.world.currentBoard.getMatrix();\n\n        this.setState({\n            world: {\n                currentBoard: this.createNewWorld(currentMapState, newMap),\n                currentPopulation: this.countPopulation(currentMapState),\n                type: newMap,\n            },\n        });\n    }\n\n    /**\n     * Select listener. Changes the board's color pallete.\n     *\n     * @param ev The select's ChangeEvent\n     */\n    changeColorPallete(ev: React.ChangeEvent) {\n        const option = (ev.target as HTMLSelectElement).selectedIndex;\n\n        this.setState({\n            currentPallete: this.palletes[option],\n        });\n    }\n}\n","/*\n * Viewport.tsx\n * Types: ../types/Viewport.ts\n */\n\nimport React from \"react\";\nimport { ViewportProps, ViewportState } from \"../types/Viewport\";\nimport Game from \"./Game\";\nimport '../styles/Viewport.css';\n\nexport default class Viewport extends React.Component<ViewportProps, ViewportState> {\n\n    constructor(props: ViewportProps) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div className='viewport'>\n                <p>Conway's Game of Life in React</p>\n                <Game />\n                <p>Developed by <a href='https://github.com/CJengineer18' target='_blank' rel=\"noopener noreferrer\">Cristian José Jiménez Diazgranados</a></p>\n                <p>See source code <a href='https://github.com/CJengineer18/react-game-of-life/' target='_blank' rel=\"noopener noreferrer\">here</a></p>\n                <p>About <a href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life' target='_blank' rel=\"noopener noreferrer\">Game of Life</a> in Wikipedia</p>\n                <p>License: MIT</p>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport Viewport from \"./components/Viewport\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Viewport />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}