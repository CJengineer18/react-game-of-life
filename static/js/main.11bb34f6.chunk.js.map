{"version":3,"sources":["components/Board.tsx","maps/World.ts","maps/worlds/Closed2D.ts","maps/worlds/Toroid.ts","components/ControlPanel.tsx","components/Game.tsx","components/Viewport.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Board","props","state","printCells","bind","size","this","boardSize","wCells","Math","round","cellSize","hCells","cSize","visibleGrid","className","style","width","height","i","j","cells","matrix","boardMatrix","push","key","id","getValue","join","onClick","cellListener","React","Component","World","x","y","realX","validateX","realY","validateY","newValue","Closed2D","length","Toroid","abs","ControlPanel","currentGeneration","world","currentPopulation","stepListener","clearListener","type","onChange","checkboxListener","checked","grid","selectListener","value","maps","map","index","Game","board","cell","nCellSide","changeCellState","clearBoard","showGrid","changeMapType","currentBoard","zeroes","newGeneration","asyncUpdateBoard","newBoard","setState","arr","Promise","resolve","reject","updateBoard","neighborhood","population","newBoardState","currentState","getNeighborhoodState","countPopulation","createNewWorld","idxX","idxY","move","sum","ev","coords","target","split","n","parseInt","alive","setValue","forEach","row","mapType","newWorld","newMap","selectedOptions","currentMapState","getMatrix","Viewport","href","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11bb34f6.chunk.js","sourcesContent":["/*\n * Board.tsx\n * Types: ../types/Board.ts\n *\n * The panel where the game plays.\n */\n\nimport React from \"react\";\nimport \"../styles/Board.scss\";\nimport { BoardProps, BoardState } from \"../types/Board\";\n\nexport default class Board extends React.Component<BoardProps, BoardState> {\n    constructor(props: BoardProps) {\n        super(props);\n        this.state = {};\n\n        this.printCells = this.printCells.bind(this);\n    }\n\n    render() {\n        const size = this.props.boardSize;\n        const wCells = Math.round(size / this.props.cellSize);\n        const hCells = Math.round(size / this.props.cellSize);\n        const cSize = this.props.visibleGrid\n            ? this.props.cellSize - 2\n            : this.props.cellSize;\n\n        return (\n            <div className=\"board\" style={{ width: size, height: size }}>\n                {this.printCells(wCells, hCells, cSize)}\n            </div>\n        );\n    }\n\n    /**\n     * Creates the cells in the board.\n     *\n     * @param wCells Total cells in x axis.\n     * @param hCells Total cells in y axis.\n     * @param size Size of each cell side in pixels.\n     *\n     * @returns JSX.Element[]\n     */\n    printCells(wCells: number, hCells: number, size: number) {\n        const cells = [];\n        const matrix = this.props.boardMatrix;\n\n        let i;\n        let j;\n\n        for (i = 0; i < hCells; i++) {\n            for (j = 0; j < wCells; j++) {\n                cells.push(\n                    <div\n                        key={`cell_${i}-${j}`}\n                        id={`${i}-${j}`}\n                        style={{ width: size, height: size }}\n                        className={[\n                            \"boardCell\",\n                            matrix.getValue(i, j) ? \"alive\" : \"dead\",\n                            this.props.visibleGrid ? \"grid\" : \"\",\n                        ].join(\" \")}\n                        onClick={this.props.cellListener}\n                    />\n                );\n            }\n        }\n\n        return cells;\n    }\n}\n","/**\n * Defines the World Map for the game. The map must be a number matrix.\n */\nexport default abstract class World {\n    protected matrix: number[][];\n\n    constructor(matrix: number[][]) {\n        this.matrix = matrix;\n    }\n\n    protected abstract validateX(x: number): number;\n    protected abstract validateY(y: number): number;\n\n    public getValue(x: number, y: number) {\n        const realX = this.validateX(x);\n        const realY = this.validateY(y);\n\n        return this.matrix[realX][realY];\n    }\n\n    public setValue(x: number, y: number, newValue: number) {\n        const realX = this.validateX(x);\n        const realY = this.validateY(y);\n\n        this.matrix[realX][realY] = newValue;\n    }\n\n    public getMatrix() {\n        return this.matrix;\n    }\n}\n","// 2D world with limits\n\nimport World from \"../World\";\n\nexport default class Closed2D extends World {\n    protected validateX(x: number): number {\n        if (x >= this.matrix.length) {\n            x = this.matrix.length - 1;\n        } else if (x < 0) {\n            x = 0;\n        }\n\n        return x;\n    }\n\n    protected validateY(y: number): number {\n        if (y >= this.matrix[0].length) {\n            y = this.matrix[0].length - 1;\n        } else if (y < 0) {\n            y = 0;\n        }\n\n        return y;\n    }\n}\n","// Toroid world\n\nimport World from \"../World\";\n\nexport default class Toroid extends World {\n    protected validateX(x: number) {\n        if (x < 0) {\n            x = this.matrix.length - Math.abs(x);\n        } else if (x >= this.matrix.length) {\n            x = Math.abs(x - this.matrix.length);\n        }\n\n        return x;\n    }\n\n    protected validateY(y: number) {\n        if (y < 0) {\n            y = this.matrix[0].length - Math.abs(y);\n        } else if (y >= this.matrix[0].length) {\n            y = Math.abs(y - this.matrix[0].length);\n        }\n\n        return y;\n    }\n}\n","/*\n * ControlPanel.tsx\n * Types: ../types/ControlPanel.ts\n * \n * Show the available options for the game.\n */\n\nimport React from \"react\";\nimport { ControlPanelProps, ControlBoardState } from \"../types/ControlPanel\";\nimport \"../styles/ControlPanel.scss\";\n\nexport default class ControlPanel extends React.Component<ControlPanelProps, ControlBoardState> {\n    constructor(props: ControlPanelProps) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div className=\"control\">\n                <p>Generation: {this.props.currentGeneration}</p>\n                <p>Population: {this.props.world.currentPopulation}</p>\n                <button onClick={this.props.stepListener}>Step</button>\n                <button onClick={this.props.clearListener}>Clear</button>\n                <p>\n                    <input\n                        type=\"checkbox\"\n                        onChange={this.props.checkboxListener}\n                        checked={this.props.grid}\n                    />{\" \"}\n                    Grid\n                </p>\n                <p>Map Type: </p>\n                <select\n                    onChange={this.props.selectListener}\n                    value={this.props.world.type}>\n                    {this.props.maps.map((map, index) => {\n                        return (\n                            <option key={`map-opt-${index}`} value={map}>\n                                {map}\n                            </option>\n                        );\n                    })}\n                </select>\n            </div>\n        );\n    }\n}\n","/*\n * Game.tsx\n * Types: ../types/Game.ts\n *\n * The game itself. Contains the rules and the events required for the execution.\n */\n\nimport React from \"react\";\nimport { GameProps, GameState, WorldState } from \"../types/Game\";\nimport Board from \"./Board\";\nimport World from \"../maps/World\";\nimport Closed2D from \"../maps/worlds/Closed2D\";\nimport Toroid from \"../maps/worlds/Toroid\";\nimport ControlPanel from \"./ControlPanel\";\n\nexport default class Game extends React.Component<GameProps, GameState> {\n    private board = 1000;\n    private cell = 20;\n    private nCellSide = 0;\n\n    constructor(props: GameProps) {\n        super(props);\n\n        this.changeCellState = this.changeCellState.bind(this);\n        this.clearBoard = this.clearBoard.bind(this);\n        this.showGrid = this.showGrid.bind(this);\n        this.changeMapType = this.changeMapType.bind(this);\n\n        this.nCellSide = Math.round(this.board / this.cell);\n        this.state = {\n            currentGeneration: 1,\n            grid: true,\n            world: {\n                currentBoard: new Toroid(this.zeroes()),\n                currentPopulation: 0,\n                type: \"Toroid\",\n            },\n        };\n    }\n\n    // React functions\n\n    render() {\n        const maps = [\"Toroid\", \"Closed2D\"];\n\n        return (\n            <div className=\"game\">\n                <ControlPanel\n                    maps={maps}\n                    world={this.state.world}\n                    grid={this.state.grid}\n                    currentGeneration={this.state.currentGeneration}\n                    stepListener={() => this.newGeneration()}\n                    clearListener={() => this.clearBoard()}\n                    selectListener={this.changeMapType}\n                    checkboxListener={() => this.showGrid()}\n                />\n                <Board\n                    boardSize={this.board}\n                    cellSize={this.cell}\n                    boardMatrix={this.state.world.currentBoard}\n                    cellListener={this.changeCellState}\n                    visibleGrid={this.state.grid}\n                />\n            </div>\n        );\n    }\n\n    // Class functions\n\n    /**\n     * Loads the new generation according to the rules.\n     */\n    async newGeneration() {\n        const newBoard = await this.asyncUpdateBoard();\n\n        this.setState({\n            currentGeneration: this.state.currentGeneration + 1,\n            world: newBoard,\n        });\n    }\n\n    /**\n     * Creates a matrix of zeroes.\n     *\n     * @return A matrix of zeroes.\n     */\n    zeroes() {\n        const arr: number[][] = [];\n        const size = this.nCellSide;\n\n        let i; // x\n        let j; // y\n\n        for (i = 0; i < size; i++) {\n            arr[i] = [];\n\n            for (j = 0; j < size; j++) {\n                arr[i][j] = 0;\n            }\n        }\n\n        return arr;\n    }\n\n    /**\n     * Updates the board asyncronously.\n     *\n     * @returns Promise<WorldState>\n     */\n    asyncUpdateBoard() {\n        return new Promise<WorldState>((resolve, reject) => {\n            resolve(this.updateBoard());\n        });\n    }\n\n    /**\n     * Executes the rules and update the board with the next generarion.\n     *\n     * @returns WorldState\n     */\n    updateBoard() {\n        const size = this.nCellSide;\n        const newBoardState: number[][] = this.zeroes();\n        const currentState = this.state.world.currentBoard;\n\n        let i; // x\n        let j; // y\n        let neighborhood;\n        let population;\n\n        for (i = 0; i < size; i++) {\n            for (j = 0; j < size; j++) {\n                neighborhood = this.getNeighborhoodState(i, j);\n\n                if (!currentState.getValue(i, j) && neighborhood === 3) {\n                    newBoardState[i][j] = 1;\n                } else if (\n                    currentState.getValue(i, j) &&\n                    (neighborhood < 2 || neighborhood > 3)\n                ) {\n                    newBoardState[i][j] = 0;\n                } else {\n                    newBoardState[i][j] = currentState.getValue(i, j);\n                }\n            }\n        }\n\n        population = this.countPopulation(newBoardState);\n\n        return {\n            currentBoard: this.createNewWorld(newBoardState),\n            currentPopulation: population,\n            type: this.state.world.type,\n        };\n    }\n\n    /**\n     * Get the number of neighbors in a coordinate.\n     *\n     * @param x\n     * @param y\n     *\n     * @returns number\n     */\n    getNeighborhoodState(x: number, y: number) {\n        const size = this.nCellSide;\n        const move = [-1, 0, 1];\n\n        let i;\n        let j;\n        let idxX;\n        let idxY;\n        let sum = 0;\n\n        // Toroid\n        for (i = 0; i < move.length; i++) {\n            for (j = 0; j < move.length; j++) {\n                idxX = (x + move[i]) % size;\n                idxY = (y + move[j]) % size;\n\n                if (move[i] !== 0 || move[j] !== 0) {\n                    sum += this.state.world.currentBoard.getValue(idxX, idxY);\n                }\n            }\n        }\n\n        return sum;\n    }\n\n    /**\n     * Mouse event. Change the state of a cell.\n     *\n     * @param ev The mouse event\n     */\n    changeCellState(ev: React.MouseEvent) {\n        const id = (ev.target as HTMLElement).id;\n        const coords = id.split(\"-\").map((n) => {\n            return parseInt(n);\n        });\n        const board = this.state.world.currentBoard;\n        const alive = !!board.getValue(coords[0], coords[1]);\n\n        board.setValue(coords[0], coords[1], alive ? 0 : 1);\n\n        this.setState({\n            world: {\n                currentBoard: board,\n                currentPopulation: alive\n                    ? this.state.world.currentPopulation - 1\n                    : this.state.world.currentPopulation + 1,\n                type: this.state.world.type,\n            },\n        });\n    }\n\n    /**\n     * Counts the total of alive cells in a board.\n     *\n     * @param board\n     */\n    countPopulation(board: number[][]) {\n        let population = 0;\n\n        board.forEach((row) => {\n            row.forEach((n) => {\n                if (n) {\n                    population++;\n                }\n            });\n        });\n\n        return population;\n    }\n\n    /**\n     * Cleans the board and restart the game.\n     */\n    clearBoard() {\n        this.setState({\n            currentGeneration: 1,\n            world: {\n                currentBoard: this.createNewWorld(this.zeroes()),\n                currentPopulation: 0,\n                type: this.state.world.type,\n            },\n        });\n    }\n\n    /**\n     * Shows or hide the grid in the board.\n     */\n    showGrid() {\n        this.setState({\n            grid: !this.state.grid,\n        });\n    }\n\n    /**\n     * Update the board with a new world. Each world has it's own rules.\n     *\n     * @param matrix The board\n     * @param mapType (Optional) The new board type. Default to current selected in list.\n     *\n     * @returns World\n     * @see changeMapType\n     */\n    createNewWorld(matrix: number[][], mapType?: string) {\n        const map = mapType || this.state.world.type;\n\n        let newWorld: World;\n\n        switch (map) {\n            case \"Closed2D\":\n                newWorld = new Closed2D(matrix);\n                break;\n            case \"Toroid\":\n                newWorld = new Toroid(matrix);\n                break;\n            default:\n                newWorld = this.state.world.currentBoard;\n                break;\n        }\n\n        return newWorld;\n    }\n\n    /**\n     * Select listener. Re-creates the game's world with a new map.\n     *\n     * @param ev: The select's ChangeEvent.\n     */\n    changeMapType(ev: React.ChangeEvent) {\n        const newMap = (ev.target as HTMLSelectElement).selectedOptions[0]\n            .value;\n        const currentMapState = this.state.world.currentBoard.getMatrix();\n\n        this.setState({\n            world: {\n                currentBoard: this.createNewWorld(currentMapState, newMap),\n                currentPopulation: this.countPopulation(currentMapState),\n                type: newMap,\n            },\n        });\n    }\n}\n","/*\n * Viewport.tsx\n * Types: ../types/Viewport.ts\n */\n\nimport React from \"react\";\nimport { ViewportProps, ViewportState } from \"../types/Viewport\";\nimport Game from \"./Game\";\nimport '../styles/Viewport.css';\n\nexport default class Viewport extends React.Component<ViewportProps, ViewportState> {\n\n    constructor(props: ViewportProps) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div className='viewport'>\n                <p>Conway's Game of Life in React</p>\n                <Game />\n                <p>Developed by <a href='https://github.com/CJengineer18' target='_blank' rel=\"noopener noreferrer\">Cristian José Jiménez Diazgranados</a></p>\n                <p>See source code <a href='https://github.com/CJengineer18/react-game-of-life/' target='_blank' rel=\"noopener noreferrer\">here</a></p>\n                <p>About <a href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life' target='_blank' rel=\"noopener noreferrer\">Game of Life</a> in Wikipedia</p>\n                <p>License: MIT</p>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport Viewport from \"./components/Viewport\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Viewport />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}